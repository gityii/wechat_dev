
开发步骤：

一、域名及其他配置：
    1、关于网页授权回调域名的说明（回调是什么意思）
    在微信公众号请求用户网页授权之前，开发者需要先到公众平台官网中的“开发 - 接口权限 - 网页服务 - 网页授权 - 网页授权获取用户基本信息”的配置选项中，修改授权回调域名。请注意，这里填写的是域名（是一个字符串），而不是URL，因此请勿加 http:// 等协议头；
    
    2、授权回调域名配置规范为全域名，比如需要网页授权的域名为：www.qq.com，配置以后此域名下面的页面http://www.qq.com/music.html 、 http://www.qq.com/login.html 都可以进行OAuth2.0鉴权。但http://pay.qq.com 、 http://music.qq.com 、 http://qq.com无法进行OAuth2.0鉴权 
    
    3、如果公众号登录授权给了第三方开发者来进行管理，则不必做任何设置，由第三方代替公众号实现网页授权即可 
    
    
    当前网页授权域名设置:  taizhou.qqdasu.com
    
    AppID：      wxc71e1e8c468e226d
    AppSecret：  33e506f139b63c2d14569a3ed120cf9c


二、

第一步：用户授权并获取code
    
   在域名根目录下，新建一个文件，命名为oauth2.php，其内容为：
   
   <?php
       if (isset($_GET['code'])){
           echo $_GET['code'];
       }else{
           echo "NO CODE";
       }
   ?>	
       	
   请求授权页面的构造方式（范例）：
   
   https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&redirect_uri=REDIRECT_URI&response_type=code&scope=SCOPE&state=STATE#wechat_redirect
   
   
   参数说明
   参数			必须			说明
   appid 			 是 			公众号的唯一标识
   redirect_uri 	 是 			授权后重定向的回调链接地址
   response_type 	 是 			返回类型，请填写code
   scope 			 是 			应用授权作用域,snsapi_base（不弹出授权页面，直接跳转，只能获取用户openid），
   								    nsapi_userinfo（弹出授权页面，可通过openid拿到昵称、性别、所在地。并且，即使在未关注的情况下，只要用户授权，也能获取其信息）
   state 			 否 			重定向后会带上state参数，开发者可以填写任意参数值
   #wechat_redirect  否 	        直接在微信打开链接，可以不填此参数。做页面302重定向时候，必须带此参数
   

   构造请求url如下（真实），这里面包括两个部分，一个是授权，一个是跳转：
   https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxc71e1e8c468e226d&redirect_uri=http://taizhou.qqdasu.com/test/oauth2.php&response_type=code&scope=snsapi_userinfo&state=1#wechat_redirect
   

   
   把下面的内容粘到自己的微信里面：	
   OAuth2.0网页授权演示 
   <a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxc71e1e8c468e226d&redirect_uri=http://taizhou.qqdasu.com/test/oauth2.php&response_type=code&scope=snsapi_userinfo&state=1#wechat_redirect">点击这里体验</a>
   技术支持 工作室

   
	其他的例子，(请在微信客户端中打开此链接体验)，scope为snsapi_base: 
  	https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx520c15f417810387&redirect_uri=https%3A%2F%2Fchong.qq.com%2Fphp%2Findex.php%3Fd%3D%26c%3DwxAdapter%26m%3DmobileDeal%26showwxpaytitle%3D1%26vb2ctag%3D4_2030_5_1194_60&response_type=code&scope=snsapi_base&state=123#wechat_redirect 
	
	scope为snsapi_userinfo(有错)：
   https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxf0e81c3bee622d60&redirect_uri=http%3A%2F%2Fnba.bluewebgame.com%2Foauth_response.php&response_type=code&scope=snsapi_userinfo&state=STATE#wechat_redirect 	

   
   用户同意授权后
   如果用户同意授权，页面将跳转至 redirect_uri/?code=CODE&state=STATE。

   
   获取code：
   
   http://taizhou.qqdasu.com/test/oauth2.php?code=071OgPwX1eFRiV04QjwX1WTVwX1OgPwp&state=1
   
   code等于：071OgPwX1eFRiV04QjwX1WTVwX1OgPwp

   
第二步： 使用code换取access_token
   获取code后，请求以下链接获取access_token：  https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&secret=SECRET&code=CODE&grant_type=authorization_code  
   
   参数说明
   参数			是否必须			说明
   appid 		是 					公众号的唯一标识
   secret 		是 					公众号的appsecret
   code 		是 					填写第一步获取的code参数
   grant_type 	是 					填写为authorization_code
   
   code：在这里填写为上一步获得的值
   
 
   构造请求url如下：
   https://api.weixin.qq.com/sns/oauth2/access_token?appid=wxc71e1e8c468e226d&secret=33e506f139b63c2d14569a3ed120cf9c&code=071OgPwX1eFRiV04QjwX1WTVwX1OgPwp&grant_type=authorization_code
   可以在浏览器中直接执行这条语句。
   得到json数据如下：
   {
   "access_token":"qOEfyxHjF5owMm5_4OvapqA-2g0jxaW0Lj0os02Srs9E5s47Ewn9Qx_F7dbHs_Ws-qNUtikb2vSCCgu--_UU5I6WjPyPh6LrvsyRowVeGuM",
   "expires_in":7200,
   "refresh_token":"9HCVBDlMX_fbAWKdjWZLkp0wfu_ovi4DbyNHfjZvX9JqhtyiiW2X9jYmWizG5t0SMa_VH3hjFRKHxSLm40ELMIh2alFYRsDZSqsLIxr_YP0",
   "openid":"ovQoYt5oyiXPCqyDH5U6x7DzLwog",
   "scope":"snsapi_userinfo"
   }  
 
   
  数据格式解读如下：
   参数					描述
   access_token 			网页授权接口调用凭证,注意：此access_token与基础支持的access_token不同
   expires_in 				access_token接口调用凭证超时时间，单位（秒）
   refresh_token 			用户刷新access_token
   openid 					用户唯一标识，请注意，在未关注公众号时，用户访问公众号的网页，也会产生一个用户和公众号唯一的OpenID
   scope 					用户授权的作用域，使用逗号（,）分隔
   于是，我们成功的通过code换取到了access_token，以及refresh_token
   错误时微信会返回JSON数据包如下（示例为Code无效错误）:{"errcode":40029,"errmsg":"invalid code"} 
  

第三步：刷新access_token（如果需要）
   由于access_token拥有较短的有效期，当access_token超时后，可以使用refresh_token进行刷新，refresh_token有效期为30天，当refresh_token失效之后，需要用户重新授权。
   
   请求方法：
   获取第二步的refresh_token后，请求以下链接获取access_token：  
   https://api.weixin.qq.com/sns/oauth2/refresh_token?appid=APPID&grant_type=refresh_token&refresh_token=REFRESH_TOKEN

    参数			是否必须		说明
	appid	    	是				公众号的唯一标识
	grant_type		是				填写为refresh_token
	refresh_token	是				填写通过access_token获取到的refresh_token参数     

   构造url如下：
   
   https://api.weixin.qq.com/sns/oauth2/refresh_token?appid=wxc71e1e8c468e226d&grant_type=refresh_token&refresh_token=9HCVBDlMX_fbAWKdjWZLkp0wfu_ovi4DbyNHfjZvX9JqhtyiiW2X9jYmWizG5t0SMa_VH3hjFRKHxSLm40ELMIh2alFYRsDZSqsLIxr_YP0
   
   {
   "openid":"ovQoYt5oyiXPCqyDH5U6x7DzLwog",
   "access_token":"qOEfyxHjF5owMm5_4OvapqA-2g0jxaW0Lj0os02Srs9E5s47Ewn9Qx_F7dbHs_Ws-qNUtikb2vSCCgu--_UU5I6WjPyPh6LrvsyRowVeGuM",
   "expires_in":7200,
   "refresh_token":"9HCVBDlMX_fbAWKdjWZLkp0wfu_ovi4DbyNHfjZvX9JqhtyiiW2X9jYmWizG5t0SMa_VH3hjFRKHxSLm40ELMIh2alFYRsDZSqsLIxr_YP0",
   "scope":"snsapi_base,snsapi_userinfo,"
   }
   在浏览器中执行得到前面同样格式的json数据
   
   返回说明
   
   正确时返回的JSON数据包如下：
   
   { "access_token":"ACCESS_TOKEN",  
   
    "expires_in":7200,   
   
    "refresh_token":"REFRESH_TOKEN",   
   
    "openid":"OPENID",   
   
    "scope":"SCOPE" }
	
   参数				描述
   access_token		网页授权接口调用凭证,注意：此access_token与基础支持的access_token不同
   expires_in		access_token接口调用凭证超时时间，单位（秒）
   refresh_token	用户刷新access_token
   openid			用户唯一标识
   scope			用户授权的作用域，使用逗号（,）分隔
   
   错误时微信会返回JSON数据包如下（示例为code无效错误）:
   
   {"errcode":40029,"errmsg":"invalid code"} 
   

第四步，拉取用户信息(需scope为 snsapi_userinfo)
    如果网页授权作用域为snsapi_userinfo，则此时开发者可以通过access_token和openid拉取用户信息了。  
    请求方法：
    https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&openid=OPENID
    
    参数说明
    参数					描述
    access_token			网页授权接口调用凭证,注意：此access_token与基础支持的access_token不同
    openid					用户的唯一标识
    lang					返回国家地区语言版本，zh_CN 简体，zh_TW 繁体，en 英语	
    	
    构造url如下：
    https://api.weixin.qq.com/sns/userinfo?access_token=qOEfyxHjF5owMm5_4OvapqA-2g0jxaW0Lj0os02Srs9E5s47Ewn9Qx_F7dbHs_Ws-qNUtikb2vSCCgu--_UU5I6WjPyPh6LrvsyRowVeGuM&openid=ovQoYt5oyiXPCqyDH5U6x7DzLwog&lang=zh_CN 
    	
     {
     "openid":"ovQoYt5oyiXPCqyDH5U6x7DzLwog",
     "nickname":"五棵松",
     "sex":1,
     "language":"zh_CN",
     "city":"南京",
     "province":"江苏",
     "country":"中国",
     "headimgurl":"http:\/\/wx.qlogo.cn\/mmhead\/Q3auHgzwzM727tjlibW2EoZd1CZVzKtMtz59BNcbvj4PrJNPltzic31w\/0",
     "privilege":[]
     }
    
    参数	        描述
    openid	        用户的唯一标识
    nickname		用户昵称
    sex				用户的性别，值为1时是男性，值为2时是女性，值为0时是未知
    province		用户个人资料填写的省份
    city			普通用户个人资料填写的城市
    country			国家，如中国为CN
    headimgurl		用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空。若用户更换头像，原有头像URL将失效。
    privilege		用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）
    unionid			只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。
    
    错误时微信会返回JSON数据包如下（示例为openid无效）:
    
    {"errcode":40003,"errmsg":" invalid openid "} 
    	 
	

	



	
	
关于网页授权的两种scope的区别说明:
1、以snsapi_base为scope发起的网页授权，是用来获取进入页面的用户的openid的，并且是静默授权并自动跳转到回调页的。用户感知的就是直接进入了回调页（往往是业务页面）
2、以snsapi_userinfo为scope发起的网页授权，是用来获取用户的基本信息的。但这种授权需要用户手动同意，并且由于用户同意过，所以无须关注，就可在授权后获取该用户的基本信息。 
3、用户管理类接口中的“获取用户基本信息接口”，是在用户和公众号产生消息交互或关注后事件推送后，才能根据用户OpenID来获取用户基本信息。这个接口，包括其他微信接口，都是需要该用户（即openid）关注了公众号后，才能调用成功的。 (存疑)


关于网页授权access_token和普通access_token的区别：
1、微信网页授权是通过OAuth2.0机制实现的，在用户授权给公众号后，公众号可以获取到一个网页授权特有的接口调用凭证（网页授权access_token），通过网页授权access_token可以进行授权后接口调用，如获取用户基本信息； 
2、其他微信接口，需要通过基础支持中的“获取access_token”接口来获取到的普通access_token调用。 


关于UnionID机制：
1、请注意，网页授权获取用户基本信息也遵循UnionID机制。即如果开发者有在多个公众号，或在公众号、移动应用之间统一用户帐号的需求，需要前往微信开放平台（open.weixin.qq.com）绑定公众号后，才可利用UnionID机制来满足上述需求。 
2、UnionID机制的作用说明：如果开发者拥有多个移动应用、网站应用和公众帐号，可通过获取用户基本信息中的unionid来区分用户的唯一性，因为同一用户，对同一个微信开放平台下的不同应用（移动应用、网站应用和公众帐号），unionid是相同的。 


关于特殊场景下的静默授权：
1、上面已经提到，对于以snsapi_base为scope的网页授权，就静默授权的，用户无感知； 
2、对于已关注公众号的用户，如果用户从公众号的会话或者自定义菜单进入本公众号的网页授权页，即使是scope为snsapi_userinfo，也是静默授权，用户无感知。


具体而言，网页授权流程分为四步：
1、引导用户进入授权页面同意授权，获取code 
2、通过code换取网页授权access_token（与基础支持中的access_token不同） 
3、如果需要，开发者可以刷新网页授权access_token，避免过期 
4、通过网页授权access_token和openid获取用户基本信息（支持UnionID机制） 






